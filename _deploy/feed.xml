<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tiago Espinha</title>
    <description>My Personal Blog</description>
    <link>https://etiago.github.io/</link>
    <atom:link href="https://etiago.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 30 Jun 2016 19:59:26 +0200</pubDate>
    <lastBuildDate>Thu, 30 Jun 2016 19:59:26 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Why I started using emacs (and why you shouldn&amp;#8217;t)</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  In what feels like a long time ago, I &amp;#8211; as the curious software engineer that I am &amp;#8211; began a journey. I had decided to try vim (&lt;em&gt;&amp;#8220;wha&amp;#8230;? It said emacs in the title&amp;#8230; is this the right art&amp;#8230;&amp;#8221;&lt;/em&gt; &amp;#8212; yes it is, just keep on reading). It&amp;#8217;d always baffled me why would people use such a barebones editor over a proper IDE but I figured, if so many people were using it and following it almost as a cult, there &lt;em&gt;must&lt;/em&gt; be something to it. So I sat down and forced myself to learn some basics to get me started. And, of course, I started by learning how to &lt;em&gt;quit&lt;/em&gt; the editor (relevant side joke: &lt;em&gt;Q: How do you generate a random string? A: Put a Windows user in front of vi, and tell them to exit.&lt;/em&gt;), learned about the different modes and I learned basic things like moving forwards and backwards by units of words, and how to delete multiple lines and how to go to a certain line, etc. Basically the kind of thing I would be faced with whilst using vim to actually achieve something programming-wise.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  [Continue Reading]
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  And it was glorious.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  The muscle memory started forming and it became second nature. Vim became part of my tool belt and, when it came to editing files, I started to use it for &lt;em&gt;everything. &lt;/em&gt;Delete lines in bulk? Got it. Search and replace the whole document with regular expressions? Piece of cake. Moving around the document by using search rather than painstakingly scrolling my way to it? Hell yeah.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  As part of my vim usage, I also created a very small .vimrc which loaded some basic plugins and set the tabbing policies to something sensible (spaces master race!), but that was it, and all was well.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Then one day, I woke up and thought: &lt;em&gt;&amp;#8220;heh, it&amp;#8217;s funny, I&amp;#8217;ve heard about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Editor_war&quot;&gt;editor war&lt;/a&gt; but I never really took the time to see what&amp;#8217;s on the other side of the fence&amp;#8221;&lt;/em&gt; and so I decided to climb the fence and have a quick peek. I equipped myself with emacs and, again, forced myself to go through the same bootcamp I had forced myself to years earlier with vim. Not only did I do the same thing, but because my muscle memory was already developed around vim, I started noting down the key combinations for the most common things I was doing in vim, except this time in emacs.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Editor-wise, I didn&amp;#8217;t feel much difference in productivity. It was when I started exploring the different plugins and available customizations that I got really hooked. You see, emacs has its equivalent of the .vimrc file, the init.el. Here is where you can load plugins and set configuration variables to be loaded on emacs&amp;#8217; startup. While in the process of trying to customize emacs to behave the same way &lt;em&gt;my&lt;/em&gt; vim was behaving with regards to tabbing and directory explorer (I was using NERDTree) I found out how that in emacs you can simply set up MELPA, emacs&amp;#8217; package repository, and install everything through it. Emacs has its own package repository. Mind blown. Every single mainstream plugin is available at the distance of Alt + X (M-x in emacs notation), writing package-install, and then typing the name of the package. It&amp;#8217;s like your editor has its own version of &lt;em&gt;apt-get&lt;/em&gt;.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Since this exotic new editor (which contrary to vim is always in edit mode) was allowing me to discover, install and configure a whole range of plugins through a package repository, I started installing and configuring. That&amp;#8217;s when mind blown #2 came. To load and configure this plugins via the &lt;em&gt;init.el&lt;/em&gt; file I was writing elisp code. That&amp;#8217;s right, emacs is built around elisp, its own dialect of a functional programming lisp language. I&amp;#8217;d never done any functional programming before, but damn, I was enjoying it thoroughly. I&amp;#8217;d never done any Vimscript before but I&amp;#8217;d heard horror stories about it, and elisp, by opposition, was being a walk in a very pleasant park with a warm breeze flowing through.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  After all was said and done, and after gradually (over the course of days) customizing my init.el to my liking, my emacs was looking no different than a fancy Atom or Sublime Text. Below you&amp;#8217;ll find a comparison of what emacs looks like out of the box (courtesy of GNU) and what &lt;em&gt;my&lt;/em&gt; emacs looks like sporting the monokai theme:&lt;img class=&quot;wp-image-775 aligncenter&quot; src=&quot;https://www.tiagoespinha.net/wp-content/uploads/2016/05/splash.png&quot; alt=&quot;splash&quot; width=&quot;500&quot; height=&quot;453&quot; srcset=&quot;https://www.tiagoespinha.net/wp-content/uploads/2016/05/splash.png 722w, https://www.tiagoespinha.net/wp-content/uploads/2016/05/splash-300x272.png 300w, https://www.tiagoespinha.net/wp-content/uploads/2016/05/splash-500x453.png 500w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;img class=&quot;wp-image-774 aligncenter&quot; src=&quot;https://www.tiagoespinha.net/wp-content/uploads/2016/05/Capture-1024x718.png&quot; alt=&quot;Capture&quot; width=&quot;500&quot; height=&quot;350&quot; srcset=&quot;https://www.tiagoespinha.net/wp-content/uploads/2016/05/Capture-1024x718.png 1024w, https://www.tiagoespinha.net/wp-content/uploads/2016/05/Capture-300x210.png 300w, https://www.tiagoespinha.net/wp-content/uploads/2016/05/Capture-768x538.png 768w, https://www.tiagoespinha.net/wp-content/uploads/2016/05/Capture-500x350.png 500w, https://www.tiagoespinha.net/wp-content/uploads/2016/05/Capture-900x631.png 900w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Now, a few weeks later, I look back and I think I would have done it all the same. However, beware, &lt;em&gt;don&amp;#8217;t&lt;/em&gt; get into emacs unless you really have the time to spare to have a whole new world opened to you. Are you already a functional programming guru? Then step right ahead, you&amp;#8217;ll feel right at home with emacs. Otherwise, you&amp;#8217;ll find yourself discovering &lt;em&gt;more&lt;/em&gt; than an editor. Emacs was once jokingly defined as a &amp;#8220;great operating system, lacking only a decent editor&amp;#8221;. I disagree. It &lt;em&gt;is&lt;/em&gt; an operating system, but the editor itself is awesome and kicks vim out of the park any time. By the way, did I mention that vim was &lt;em&gt;implemented &lt;/em&gt;within emacs? You will be able to use your tested and tried vim experience with all the goodness of emacs. What&amp;#8217;s more to want?
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Have fun with emacs and tell me about your experiences in the comments section below. Until the next time.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 18:03:33 +0200</pubDate>
        <link>https://etiago.github.io/2016/05/why-i-started-using-emacs-and-why-you-shouldnt/</link>
        <guid isPermaLink="true">https://etiago.github.io/2016/05/why-i-started-using-emacs-and-why-you-shouldnt/</guid>
        
        <category>editor</category>
        
        <category>emacs</category>
        
        <category>functional programming</category>
        
        <category>Software</category>
        
        
        <category>Software</category>
        
      </item>
    
      <item>
        <title>Stuck at &amp;#8220;Preparing your Desktop&amp;#8221; After Migrating Windows Partition to SSD?</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  Recently at work I helped a colleague migrating his laptop from a HDD to an SSD. He was dual-booting his machine with Windows 7 and Ubuntu, and after skillfully shrinking his original partitions (in order to fit the SSD), we copied the partitions over with dd from the HDD to the SSD. After that was done, Grub was understandably confused as its entries were pointing to the HDD partitions rather than the SSD partitions but even after an update-grub and grub-install from within Ubuntu, Windows still wouldn&amp;#8217;t boot.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  We consistently got stuck at &amp;#8220;Preparing your Desktop&amp;#8221; screen and eventually Windows would boot into a completely empty desktop.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Keep reading to figure out how to fix this.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Even though my Windows skills have rusted from having fully migrated to Arch Linux a while back, I still remembered you could run programs from the task manager which, conveniently, is still possible to launch using the Ctrl+Alt+Del combination. Having done so allowed me to diagnose the problem: when I ran cmd.exe, Windows was mounting the SSD partition from which I was trying to boot as F:\ rather than C:\ where Windows expected everything to be.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  The fix, after you know what to do, is simple-ish.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Essentially you need to change your registry (you know, regedit) and remove all the letter mappings so that Windows will remap all your drives again at boot.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Easy right? Just launch regedit and edit away! But NO! Because you will, with 100% certainty, not be able to launch regedit!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  So what&amp;#8217;s the solution then, how can you edit your registry without actually being able to boot into Windows?
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Nice question! We do it from Ubuntu using a nifty tool called chntpw which was originally developed (I assume&amp;#8230; based on the name&amp;#8230;) to change the password of NT-based systems.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  So! Jump on Ubuntu, get yourself chntpw installed (seriously, if you don&amp;#8217;t know how to do this, get a friend to help you as the next steps are VERY sensitive!) and do the following steps:
&lt;/p&gt;

&lt;ol style=&quot;text-align: justify;&quot;&gt;
  &lt;li&gt;
    Mount your Windows partition (from now on called &lt;WindowsPartition&gt;).
  &amp;lt;/li&amp;gt;
  &lt;li&gt;
    Run chntpw -i &lt;WindowsPartition&gt;/Windows/System32/config/system (N.B. Windows is not case-sensitive but Linux is! Therefore, your file might be called SYSTEM).
  &amp;lt;/li&amp;gt;
  &lt;li&gt;
    From the menu, choose option 9 (Registry Editor).
  &lt;/li&gt;
  &lt;li&gt;
    Now if you type &amp;#8220;ls&amp;#8221;, one of the items should be &amp;#8220;MountedDevices&amp;#8221;.
  &lt;/li&gt;
  &lt;li&gt;
    Enter it by typing &amp;#8220;cd MountedDevices&amp;#8221;.
  &lt;/li&gt;
  &lt;li&gt;
    Again if you &amp;#8220;ls&amp;#8221;, a number of entries should appear, including all your drive letter mappings (we&amp;#8217;re almost there!).
  &lt;/li&gt;
  &lt;li&gt;
    Now, I had no success actually &lt;em&gt;changing&lt;/em&gt; the mappings so I ended up simply removing all the mappings and letting Windows remapping on the next boot. To do so type &amp;#8221; dv \DosDevices\C:&amp;#8221; and repeat this command for all the mapped letters in your computer.
  &lt;/li&gt;
  &lt;li&gt;
    Do &amp;#8220;ls&amp;#8221; one more time to confirm the mappings have been deleted.
  &lt;/li&gt;
  &lt;li&gt;
    Choose option &amp;#8220;q&amp;#8221; to quit chntpw followed by &amp;#8220;y&amp;#8221; to confirm writing the registry hive file.
  &lt;/li&gt;
  &lt;li&gt;
    TADA! You&amp;#8217;re done! Boot into Windows and it should finally boot correctly.
  &lt;/li&gt;
&amp;lt;/ol&amp;gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Let me know in the comments if you&amp;#8217;re stuck in some step and I&amp;#8217;ll gladly give a hand!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Till the next time!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  [&lt;a href=&quot;http://members.iinet.net/~herman546/Hacking%20the%20Windows%20Registry%20with%20chntpw.html&quot; target=&quot;_blank&quot;&gt;Credit&lt;/a&gt;]
&lt;/p&gt;
&lt;/WindowsPartition&gt;&lt;/li&gt;&lt;/WindowsPartition&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Tue, 08 Sep 2015 22:52:59 +0200</pubDate>
        <link>https://etiago.github.io/2015/09/stuck-at-preparing-your-desktop-after-migrating-windows-partition-to-ssd/</link>
        <guid isPermaLink="true">https://etiago.github.io/2015/09/stuck-at-preparing-your-desktop-after-migrating-windows-partition-to-ssd/</guid>
        
        <category>HDD</category>
        
        <category>Migrate Windows Partition</category>
        
        <category>Software</category>
        
        <category>SSD</category>
        
        <category>Ubuntu</category>
        
        <category>Windows</category>
        
        
        <category>Software</category>
        
        <category>Windows</category>
        
      </item>
    
      <item>
        <title>Disable power management for the 8188eu driver in Raspbian</title>
        <description>&lt;p&gt;Many WIFI USB dongles out there rely on the 8188eu driver for support under Linux. In fact, in a &lt;a href=&quot;http://www.tiagoespinha.net/2014/04/how-to-get-the-tp-link-tl-wn725n-working-on-raspberry-pi/&quot;&gt;previous post&lt;/a&gt;  I covered how to compile a 8188eu driver for your own Raspbian kernel which will keep being upgraded if you are vigilant enough to run rpi-update every now and then.&lt;/p&gt;

&lt;p&gt;One thing I didn’t mention in that blog post is that certain devices which use this chipset will enter power management mode after some time.&lt;/p&gt;

&lt;p&gt;If this is the case with your device, you can fix it by creating a file called /etc/modprobe.d/8188eu.conf which loads the configuration for the 8188eu kernel module and write the following inside:&lt;/p&gt;

&lt;p&gt;options 8188eu rtw_power_mgnt=0 rtw_enusbss=0&lt;/p&gt;

&lt;p&gt;Then restart your Raspbian and you should be good to go!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 22:46:20 +0200</pubDate>
        <link>https://etiago.github.io/2015/04/disable-power-management-for-the-8188eu-driver-in-raspbian/</link>
        <guid isPermaLink="true">https://etiago.github.io/2015/04/disable-power-management-for-the-8188eu-driver-in-raspbian/</guid>
        
        <category>8188eu</category>
        
        <category>Raspberry Pi</category>
        
        <category>Raspbian</category>
        
        <category>raspbian wifi turns off</category>
        
        <category>Software</category>
        
        <category>wifi power management</category>
        
        
        <category>Software</category>
        
        <category>Technology</category>
        
      </item>
    
      <item>
        <title>[Photo] Jupiter and its 4 largest moons</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  As some of you may know, I have recently taken up a new hobby. I started with (very) amateur astronomy. Now while the Dutch skies are not the best for astronomy due to having &lt;a href=&quot;http://uk.arxiv.org/pdf/astro-ph/0108052&quot;&gt;&lt;em&gt;the&lt;/em&gt; worst&lt;/a&gt; light pollution in Europe (probably due to its extensive greenhouses and the artificial lightning they require), it&amp;#8217;s still possible to see the closer objects to Earth such as the planets in our own solar system.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  [Continue reading, photos below]
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  While I had seen Jupiter in multiple occasions before, as it is visible with the naked eye, seeing its four largest moons live (Europa, Io, Ganymede and Callisto) was definitely a first for me. Believe me when I say that the photograph does not do justice to the real thing and it is indeed a pity. The photo has been taken last Sunday morning (October 5th 2014 at 6:40am, before the sunrise as Jupiter then becomes invisible due to the sunlight) with my Canon EOS 550D attached to my telescope via a T2 adapter especially tailored for Canon DSLRs. While this adapter does wonders compared to aligning a mobile phone camera with the eye piece, it also attaches directly to the telescope and thus, takes no advantage of any lens-enabling magnification.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  The result is what you see below. I&amp;#8217;ve cropped the photos to show only the section where Jupiter and its moons are. Despite not being as good as looking at it through a 10mm lens on a 3x Barlow (totaling a 400x zoom), it&amp;#8217;s still quite a sight 🙂 .
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Keep scrolling for the photos and until the next time!
&lt;/p&gt;

&lt;div id=&quot;attachment_738&quot; style=&quot;width: 330px&quot; class=&quot;wp-caption aligncenter&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/10/blog2.jpg&quot; rel=&quot;lightbox[736]&quot; title=&quot;[Photo] Jupiter and its 4 largest moons&quot;&gt;&lt;img class=&quot;wp-image-738&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/10/blog2.jpg&quot; alt=&quot;Jupiter, photo 1&quot; width=&quot;320&quot; height=&quot;200&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Left to right: Europa, Jupiter, Io, Ganymede and Callisto
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;attachment_737&quot; style=&quot;width: 330px&quot; class=&quot;wp-caption aligncenter&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/?attachment_id=737&quot;&gt;&lt;img class=&quot;wp-image-737&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/10/blog1.jpg&quot; alt=&quot;Jupiter, photo 2&quot; width=&quot;320&quot; height=&quot;200&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Left to right: Europa, Jupiter, Io, Ganymede and Callisto
  &lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Oct 2014 20:02:34 +0200</pubDate>
        <link>https://etiago.github.io/2014/10/photo-jupiter-and-its-4-largest-moons/</link>
        <guid isPermaLink="true">https://etiago.github.io/2014/10/photo-jupiter-and-its-4-largest-moons/</guid>
        
        <category>astronomy</category>
        
        <category>Astrophotography</category>
        
        <category>Four moons</category>
        
        <category>Jupiter</category>
        
        <category>Jupiter four moons</category>
        
        <category>Jupiter four moons photo</category>
        
        <category>Jupiter photo</category>
        
        
        <category>Astronomy</category>
        
      </item>
    
      <item>
        <title>Wat is alcohol ketonatus? (What is alcohol ketonatus?)</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  In het Nederlands: een simpel en een-zin antwoord is &lt;em&gt;alcohol ketonatus is alcohol die door gebruik van een ketone (meestal is butanon in Nederland gebruikt) zijn geur veranderd is om het ondrinkbaar te maken. Het zou dus niet gebruikt zijn om te drinken (waarom willen mensen 96% alcohol drinken is wel buiten mijn verstanding maar ja&amp;#8230;)&lt;/em&gt;.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  In English: A simple and one-sentence answer is &lt;em&gt;alcohol ketonatus is the Dutch nomenclature for alcohol that&amp;#8217;s been &amp;#8220;denaturated&amp;#8221;. Essentially, alcohol that through the usage of a ketone (in the Netherlands it&amp;#8217;s usually butanone) is made undrinkable and should not be used for human consumption.&lt;/em&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/09/96759.jpg&quot; rel=&quot;lightbox[731]&quot; title=&quot;Wat is alcohol ketonatus? (What is alcohol ketonatus?)&quot;&gt;&lt;img class=&quot;aligncenter wp-image-732&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/09/96759.jpg&quot; alt=&quot;96759&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &amp;#8212;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Some background&amp;#8230; whilst living in the Netherlands, I often wondered why was &amp;#8220;pure alcohol&amp;#8221; nowhere to be found. There&amp;#8217;s the alcohol shops, and the supermarkets, and they all sell wines and all kinds of distilled drinks but I could never find the pure &lt;em&gt;ethanol&lt;/em&gt; which we in Portugal use to cook &lt;em&gt;chouriça&lt;/em&gt; laid on an &lt;em&gt;assador de barro&lt;/em&gt;.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  [Continue Reading]
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  It turns out such ethanol &lt;i&gt;does&lt;/i&gt; exist and I found it on DIO (even though I later realized both etos and Kruidvat also sell them). Upon browsing through their online shop, I found a so-called &amp;#8220;&lt;em&gt;alcohol ketonatus&lt;/em&gt;&amp;#8221; which left me wondering what was this &amp;#8220;&lt;em&gt;ketonatus&lt;/em&gt;&amp;#8221; all about. Was this what I was looking for? Or was this some weird concoction and not suitable for what I needed?
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  After looking around I couldn&amp;#8217;t find a conclusive answer (even on Dutch websites) on what this &amp;#8220;&lt;em&gt;alcohol ketonatus&lt;/em&gt;&amp;#8221; was&amp;#8230; and that&amp;#8217;s when I decided to figure out what exactly was this &amp;#8220;ketonation&amp;#8221; process. Lo-and-behold, &amp;#8220;ketonation&amp;#8221; is basically what reads in the Portuguese alcohol bottles as &amp;#8220;&lt;em&gt;desnaturado&lt;/em&gt;&amp;#8220;, that is, made improper for human consumption.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  And now you know. If you&amp;#8217;re Portuguese and you&amp;#8217;re in the market for &lt;em&gt;álcool etílico desnaturado&lt;/em&gt;, just buy &amp;#8220;&lt;em&gt;alcohol ketonatus&lt;/em&gt;&amp;#8221; from your local DIO/Kruidvat/etos 😉
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;strong&gt;Pro tip&lt;/strong&gt;: If you&amp;#8217;re Portuguese, get yourself a hold of someone in Portugal who makes his/her own &lt;em&gt;bagaço/aguardente&lt;/em&gt; and use that instead. You&amp;#8217;ll get a better aftertaste and hey, that one can actually be drank!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;strong&gt;Pro tip 2&lt;/strong&gt;: If you really don&amp;#8217;t know anyone who can get you a supply of &lt;em&gt;aguardente&lt;/em&gt;, or if you don&amp;#8217;t travel back to Portugal often enough, then make friends with a Chinese! Odds are they can get you some 白酒 (pronounced &lt;em&gt;bái jiǔ&lt;/em&gt; or &lt;em&gt;bai2jiu3&lt;/em&gt; or just show them the Chinese characters&amp;#8230;) which is just as good or even better!
&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Sep 2014 09:29:58 +0200</pubDate>
        <link>https://etiago.github.io/2014/09/wat-is-alcohol-ketonatus-what-is-alcohol-ketonatus/</link>
        <guid isPermaLink="true">https://etiago.github.io/2014/09/wat-is-alcohol-ketonatus-what-is-alcohol-ketonatus/</guid>
        
        
        <category>Life hacks</category>
        
        <category>Uncategorized</category>
        
      </item>
    
      <item>
        <title>How to see the International Space Station (ISS)</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  Last weekend me and my wife were down in Eindhoven in the south of what was a very sunny and warm Netherlands. While visiting a friend down there we discovered they have a telescope. Oh, I was so excited! For many years, having a telescope has been a dream of mine but alas&amp;#8230; they aren&amp;#8217;t exactly cheap instruments and I always had the feeling it would be something that would get old pretty fast.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  However, as soon as I had the chance to point the telescope at the tiny shiny blimp in the sky which turned out to be Saturn, and as soon as I was able to see its rings hanging around its spherical mass of gas, I was in love. &amp;#8220;Wait, let&amp;#8217;s point it at the moon!&amp;#8221; &amp;#8211; and I was even more in love. Somehow there is some astronomic quality and reality to seeing things through that glorified mirror-lined tube that photos simply cannot capture. Much the same way a single photograph cannot capture the greatness of the Great Wall, much the same way photos cannot describe the feeling of a plane banking to 30 degrees inclination to pull you out of the floor, out to 39000 feet to take you places&amp;#8230; astronomic photographs, as spectacular and colorful as they may be, cannot describe the feeling of DIY pointing the telescope and sitting there looking, wondering, imagining.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  This means, of course, one thing: for the next few months I will be badgering my wife, trying to persuade her to allow me to invest in a good telescope.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Part of this persuasion started last night when the ISS was flying past us at its incredible speed. Normally the ISS would only be visible in the wee hours of the night and we would have to wait for the right day where all the conditions were met. You need a clear sky, the station to be passing around your area and patience to wake up in the middle of the night to see it. But last night at 23:13 would be a perfect time to spot it. Our plan was almost foiled by the patchy clouds which were planning to ruin the fun but a couple of minutes past the announced time, there it was, in all its glory. A small patch of reflected light, in total size bigger than any star, bigger indeed than any planet  and about as big as one of the planes which usually make for the Rotterdam/The Hague airport around the same area. But this one was different. It was not blinking but rather reflecting light, constantly so, and flying at a different bearing than of the planes. Hiding here and there behind one of the clouds, it was as visible as it could be in the sky which at that time was not yet so dark. In effect, as I recall, the sky&amp;#8217;s light night blue was probably the best to spot the station. Too dark and the station&amp;#8217;s colors would get lost in the background, too light and it is simply not visible at all, overexposed by the sunlight. It&amp;#8217;s pretty tough to find a photo of what we saw last night, mostly because spotting the ISS with the naked eye requires conditions which are very adverse to photography (darkness + fast moving objects) so here&amp;#8217;s a photo of the ISS in all its glory (photo courtesy of Wikipedia):
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/06/International_Space_Station_after_undocking_of_STS-132.jpg&quot; rel=&quot;lightbox[712]&quot; title=&quot;How to see the International Space Station (ISS)&quot;&gt;&lt;img class=&quot;alignleft wp-image-713&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/06/International_Space_Station_after_undocking_of_STS-132.jpg&quot; alt=&quot;International_Space_Station_after_undocking_of_STS-132&quot; width=&quot;480&quot; height=&quot;306&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  This was it, this was yet another step towards my space exploration. Yet another step in convincing my wife the 300 euro I need for a telescope will be worth it.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Oh yeah, my post&amp;#8217;s title was about how to see the ISS, right? Oh that&amp;#8217;s pretty easy&amp;#8230; If you have a smartphone, specifically Android, you can use the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.runar.issdetector&quot;&gt;ISS Detector&lt;/a&gt; app. Fill in your location and you&amp;#8217;re good to go. Otherwise just head over to NASA&amp;#8217;s very own &amp;#8220;Spot the Station&amp;#8221;: &lt;a href=&quot;http://spotthestation.nasa.gov/&quot;&gt;http://spotthestation.nasa.gov/&lt;/a&gt; . It&amp;#8217;s really worth it and you should definitely give it a go.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;strong&gt;EDIT: &lt;/strong&gt;Last night we were &amp;#8220;station spotting&amp;#8221; again and I managed to snap a picture of the ISS in all its glory. In a surprisingly clear sky, I feel that the photo does not make justice to the real thing but indeed, it is better than nothing!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/06/2014-06-11-23.15.16-copy.jpg&quot; rel=&quot;lightbox[712]&quot; title=&quot;How to see the International Space Station (ISS)&quot;&gt;&lt;img class=&quot;alignleft wp-image-718&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/06/2014-06-11-23.15.16-copy.jpg&quot; alt=&quot;2014-06-11 23.15.16 copy&quot; width=&quot;512&quot; height=&quot;683&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jun 2014 10:14:14 +0200</pubDate>
        <link>https://etiago.github.io/2014/06/how-to-see-the-international-space-station-iss/</link>
        <guid isPermaLink="true">https://etiago.github.io/2014/06/how-to-see-the-international-space-station-iss/</guid>
        
        <category>astronomy</category>
        
        <category>ISS</category>
        
        <category>Space</category>
        
        <category>telescope</category>
        
        
        <category>Space</category>
        
      </item>
    
      <item>
        <title>[Project] How to easily monitor your plants&amp;#8217; soil humidity</title>
        <description>&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  You came here to learn about soil humidity monitoring, right?
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Then you should probably scroll down to the part where I have a photo of my setup. However, if you have the time and feel like reading some of my ramblings, why don&amp;#8217;t you just continue with the next paragraph? I promise you won&amp;#8217;t be disappointed!
&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  My beginning as an urban farmer
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Spring is here and with it comes the sunshine, even in &lt;a href=&quot;http://en.wikipedia.org/wiki/Netherlands#Climate&quot;&gt;rainy Netherlands&lt;/a&gt;. For this reason I recently started growing all kinds of things at home. First I started with some of those tiny thumb-sized vases which come bundled with sunflower and lavender seeds but&amp;#8230; soon after, I realized those vases were not gonna be big enough to hold that many seeds. Determined to see those plants through to flowering, I started buying bigger vases and soil. Soon after that, I was growing not only the sunflowers and lavender but I sowed some seeds I had bought a long time ago. I was now growing several shoots of &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Mimosa_pudica&quot;&gt;mimosa pudica&lt;/a&gt; (aka the shy plant, famous for the fact that it closes its leaves when you poke it &amp;#8211; which you can see &lt;a href=&quot;https://www.youtube.com/watch?v=BLTcVNyOhUc&quot;&gt;on Youtube&lt;/a&gt;)&lt;/em&gt;, a few more seedlings of &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Allium_tuberosum&quot;&gt;chinese chives&lt;/a&gt; (or scientifically speaking, allium tuberosum&lt;/em&gt;&lt;em&gt;, delicious in many dishes)&lt;/em&gt; and my proudest plantation, seedlings of the hottest pepper in the world: the &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Trinidad_moruga_scorpion&quot;&gt;trinidad moruga scorpion&lt;/a&gt;, which i&lt;/em&gt;n the the &lt;a href=&quot;http://en.wikipedia.org/wiki/Scoville_scale&quot;&gt;Scoville scale&lt;/a&gt; is said to be approximately 500 times hotter than your average Jalapeño or Chipotle chilli. Now THAT&amp;#8217;S spicy!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  You like the post so far? Well keep on reading then!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  Okay, I became a farmer.
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Yeah okay, I didn&amp;#8217;t start farming because the weather was nice. Most people who face the same circumstances will just go to the beach or do a barbecue or just have a beer with friends in the sunshine but&amp;#8230; I realized I like farming. In a more and more brick and mortar world where everywhere there&amp;#8217;s buildings and cars and in a world where more and more the artificial replaces the natural, it is nice to have a small piece of nature close by.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  At this point I had a substantial collection of vases and it didn&amp;#8217;t take me long to realize that I sometimes would forget my plants and the soil would be bone dry. Whilst plants make for great landscape, they are very unobtrusive and don&amp;#8217;t exactly ask for water the same way my cat used to. So I decided to put my skills to good use and do something about it. After some browsing on eBay I found the perfect tool for the task: soil moisture sensors. It is important that you realize that these sensors are nothing but metal plates with a silicon coating so don&amp;#8217;t expect anything too fancy and always remember the adage: you get what you pay for.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  The sensors themselves are pretty useless but I had a few Raspberry Pi boards laying around so I started investigating whether it would be possible to take analog readouts with it, which, to my dismay, was not possible. At least not without using a USB soundcard (it&amp;#8217;s pretty ingenious actually&amp;#8230; when you think of it, what&amp;#8217;s sound if not analog current waves at different frequencies?). So I decided to be more professional and bought an old friend of mine: an Arduino Nano board which can take all kinds of readouts. It does have however the inconvenient of not being able to push the readouts anywhere. You can&amp;#8217;t connect it to a network which means you can&amp;#8217;t exactly take the data out into a database and plot it without additional devices and so the Raspberry Pi came to rescue!
&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  Time to join the forces of my inner farmer and inner nerd together!
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  What was my goal then? I wanted to build a setup that would allow me to plot a nice graph with a live readout from my plants&amp;#8217; soil humidity. Two problems there: to plot a graph you&amp;#8217;ll need to store the data somewhere and&amp;#8230; with the cheap soil moisture sensors I had bought, &amp;#8220;live&amp;#8221; was not going to be possible. &lt;strong&gt;This is something I cannot stress enough: if you&amp;#8217;ll use the same sensors as me, do NOT leave them powered for longer than what is needed to take the readout.&lt;/strong&gt; Below in this post I explain why.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  So in the end, I setup the following (photo below):
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &amp;#8211; Raspberry Pi, connected to my home network (the red UTP cable).
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &amp;#8211; Arduino, plugged to the soil moisture sensors and connected via USB to the Raspberry Pi.
&lt;/p&gt;

&lt;div id=&quot;attachment_694&quot; style=&quot;width: 522px&quot; class=&quot;wp-caption alignleft&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/2014-05-09-12.13.19.jpg&quot; rel=&quot;lightbox[689]&quot; title=&quot;[Project] How to easily monitor your plants&#39; soil humidity&quot;&gt;&lt;img class=&quot;wp-image-694&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/2014-05-09-12.13.19.jpg&quot; alt=&quot;Raspberry Pi + Arduino wired together&quot; width=&quot;512&quot; height=&quot;384&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Raspberry Pi + Arduino wired together
  &lt;/p&gt;
&lt;/div&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Then with some of my rusty C code I was able to get the Arduino up and running and sending data back to the Raspberry Pi.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  At this point please understand that there are a &lt;strong&gt;multitude of ways&lt;/strong&gt; in which the &lt;strong&gt;exact same thing can be achieved&lt;/strong&gt;. This is just what I came up with after experimenting with a couple of ways.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  In essence, what I have is: three DuPont cables going from separate digital pins on the RPi which in turn connect to separate digital pins on the Arduino Nano. The Arduino Nano has one digital pin per soil moisture sensor (which is plugged to the VCC in each of the small devices on the right&amp;#8230; they are YL-38 sensors and are explained later) and one analog pin also per soil moisture sensor (plugged to the A0 in the same YL-38 devices, to take the soil moisture readings).
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  The idea is that periodically the Raspberry Pi will send a signal to the Arduino on a specific digital pin which will then cause the Arduino board to power the small bridge device which in turn outputs an analog readout (essentially an AC wave) which the Arduino listens on and prints to the serial console.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;strong&gt;FRIENDLY ADVICE: &lt;/strong&gt;After reading around, I learned it is best to do this for short periods of time &amp;#8211; namely, not for longer than just a few seconds. If you keep the bridge device powered at all times, your sensor probes will rust within the hour due to the electrolysis which the DC current will cause to the plates. After that happens, your sensor is pretty much garbage as the sensor probes will have corroded and the moisture readouts will have become inaccurate.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Also of note is how the readings might fluctuate just after you powered the sensor. For this reason it is wise to take a series of readings (I take 20) and discard the first few (I discard the first half). Then you might as well just store a burst of readings which you can later plot into a graph.
&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  What do you need exactly?
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  My goal is to merely give you the idea and the very general pointers of how to get around doing something like this. It&amp;#8217;s most definitely not difficult and anyone with a basic understanding of electronics can get it up and running in a matter of hours. This was a lot of fun for me to figure out myself and for this reason I will not publish the code but merely give you, the reader, a general idea of what has to be done. With this and some programming knowledge, you should be able get this up and running in no time. Here&amp;#8217;s a very general walkthrough:
&lt;/p&gt;

&lt;ul style=&quot;text-align: justify;&quot;&gt;
  &lt;li&gt;
    Get both a Raspberry Pi and an Arduino board. It doesn&amp;#8217;t matter which Arduino. There&amp;#8217;s many different types and I&amp;#8217;ve chosen the Nano variant because it strikes a great balance between functionality and form-factor.
  &lt;/li&gt;
  &lt;li&gt;
    You&amp;#8217;ll also need a breadboard and DuPont wires. You can get these cheaply off eBay and I found that for most of these usages, male to female cables are ideal (the male end goes into the breadboard whereas the female end can plug directly into sensors&amp;#8217; pins).
  &lt;/li&gt;
  &lt;li&gt;
    Obviously you&amp;#8217;ll also need soil moisture sensors (photo below). There&amp;#8217;s a lot of variety here both in quality and price range. To get started I suggest you look for the cheap kind on eBay where you can get a Chinese-built YL-69 (although I normally just search for &amp;#8216;soil moisture sensor&amp;#8217;) for a little over 2 euro. These sensors also come with a &amp;#8216;middle-man&amp;#8217; circuit which allows you to get two outputs: one is an analog readout of the resistance between the sensor&amp;#8217;s two plates and the second is a digital output (essentially, HIGH or LOW, 5v or 0v) depending on whether the humidity is above or below a threshold which can in turn be adjusted by a built-in POTS. Personally I just take the analog readout and ignore the digital one. This allows me to make pretty graphs like you can see later in this post.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;attachment_701&quot; style=&quot;width: 522px&quot; class=&quot;wp-caption alignleft&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/2014-05-09-12.51.20.jpg&quot; rel=&quot;lightbox[689]&quot; title=&quot;[Project] How to easily monitor your plants&#39; soil humidity&quot;&gt;&lt;img class=&quot;wp-image-701&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/2014-05-09-12.51.20.jpg&quot; alt=&quot;Above, the soil moisture sensor itself (YL-69). Below, the bridge device which you&#39;ll need to use (YL-38).&quot; width=&quot;512&quot; height=&quot;384&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Above, the soil moisture sensor itself (YL-69). Below, the bridge device which you&amp;#8217;ll need to use (YL-38).
  &lt;/p&gt;
&lt;/div&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  After you have all the materials, it&amp;#8217;s very simple to get started. The &lt;strong&gt;YL-69&lt;/strong&gt; sensor itself has two pins which need to be wired to the two pins on the &lt;strong&gt;YL-38&lt;/strong&gt; bridge (specifically, the two isolated pins). On the other end of the YL-38, you have four pins which (top to bottom) represent VCC, GND, D0 and A0. VCC and GND are your power pins which should be set to 3.3/5V and Ground (respectively) and your A0 is an analog output which you will connect to an analog input on the Arduino board (the Arduino Nano has 8 analog pins) via the breadboard.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;strong&gt;FRIENDLY REMINDER: &lt;/strong&gt;DO NOT keep the YL-38 bridge powered for long periods of time. If you leave it permanently on, it will keep applying DC current to the YL-69 sensor which will cause corrosion due to electrolysis. If you want to keep your sensors in good shape for as long as possible, you will only apply power to VCC before you make a reading. Additionally, be sure to at least every week switch the two cables going to the YL-69 sensor as to slow down corrosion as much as possible.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  This being said, you&amp;#8217;ll want to plug the VCC on the YL-38 bridge to a digital pin on the Arduino board which you will set to HIGH (thus effectively powering the bridge) before making a reading.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  When you have the Arduino and the sensors all hooked up, you&amp;#8217;ll want to get this plugged to your laptop so you can start experimenting with the code. If you need further help with this part, please drop me a comment or an e-mail (tiagoRemove-me-and-add-at-or-elseEspinha.nl)!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  After that&amp;#8217;s done, all you have to do is use one of the GPIO pins in the Raspberry Pi as a signal for the Arduino to start a reading. Essentially my (Python) script does the following goes something like:
&lt;/p&gt;

&lt;ul style=&quot;text-align: justify;&quot;&gt;
  &lt;li&gt;
    This script first sets a GPIO pin to HIGH.
  &lt;/li&gt;
  &lt;li&gt;
    The Arduino is continuously listening to this pin and once it is raised to HIGH, sets the sensor&amp;#8217;s VCC to HIGH.
  &lt;/li&gt;
  &lt;li&gt;
    The Arduino continuously prints readouts from the sensor to the serial console.
  &lt;/li&gt;
  &lt;li&gt;
    The Python script is reading the USB output (i.e. the serial console) of the Arduino board and storing the readouts.
  &lt;/li&gt;
  &lt;li&gt;
    The Python script sends the readouts to my webserver where they are stored in a database.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Obviously, for this to work you&amp;#8217;ll need the Python libraries for the Raspberry Pi GPIO and I recommend the Python library for dealing with serial devices.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  After all&amp;#8217;s said and done, I can generate a graph such as this:
&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  &lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/Screenshot-2014-05-13-20.35.53.png&quot; rel=&quot;lightbox[689]&quot; title=&quot;[Project] How to easily monitor your plants&#39; soil humidity&quot;&gt;&lt;img class=&quot;alignleft wp-image-699&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/Screenshot-2014-05-13-20.35.53.png&quot; alt=&quot;Screenshot 2014-05-13 20.35.53&quot; width=&quot;512&quot; height=&quot;185&quot; /&gt;&lt;/a&gt;But wait, there&amp;#8217;s more!
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  I&amp;#8217;m also the proud owner of a Pebble watch, so why not put this to good use, I thought! Everything was already in place so all I had to do was set up an alert system that monitors the last collected data. If it&amp;#8217;s above a &amp;#8220;drought threshold&amp;#8221;, I receive an alert on my Pebble. But there&amp;#8217;s still more! As soon as I water my plants, I get another alert as seen below:
&lt;/p&gt;

&lt;h1 id=&quot;a-hrefhttpwwwtiagoespinhanetwp-contentuploads2014052014-04-28-084121jpg-rellightbox689-titleproject-how-to-easily-monitor-your-plants-soil-humidityimg-classwp-image-700-aligncenter-srchttpwwwtiagoespinhanetwp-contentuploads2014052014-04-28-084121jpg-alt2014-04-28-084121-width360-height480-a&quot;&gt;&lt;a href=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/2014-04-28-08.41.21.jpg&quot; rel=&quot;lightbox[689]&quot; title=&quot;[Project] How to easily monitor your plants&#39; soil humidity&quot;&gt;&lt;img class=&quot;wp-image-700 aligncenter&quot; src=&quot;http://www.tiagoespinha.net/wp-content/uploads/2014/05/2014-04-28-08.41.21.jpg&quot; alt=&quot;2014-04-28 08.41.21&quot; width=&quot;360&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  To conclude
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Thanks for reading all the way here! I hope my post was of some help for you to start in a similar endeavor. I tried to keep the technicalities (scripts, etc) down to a minimum because, well, that was the most fun part of it and I wouldn&amp;#8217;t want to spoil any of it for you! However, if you get yourself into some trouble and you need some help to move forward, feel free to drop me a comment or, more wisely, drop me an e-mail. You can reach me at tiagoRemove-me-and-add-at-or-elseEspinha.nl.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
&lt;/p&gt;
</description>
        <pubDate>Tue, 13 May 2014 22:02:06 +0200</pubDate>
        <link>https://etiago.github.io/2014/05/project-how-to-easily-monitor-your-plants-soil-humidity/</link>
        <guid isPermaLink="true">https://etiago.github.io/2014/05/project-how-to-easily-monitor-your-plants-soil-humidity/</guid>
        
        <category>Arduino</category>
        
        <category>DIY</category>
        
        <category>Do it yourself</category>
        
        <category>dupont cables</category>
        
        <category>How To</category>
        
        <category>Pebble</category>
        
        <category>Python</category>
        
        <category>Raspberry Pi</category>
        
        <category>soil moisture</category>
        
        <category>Soil moisture monitoring</category>
        
        <category>Soil moisture sensor</category>
        
        <category>YL-38</category>
        
        <category>YL-69</category>
        
        
        <category>DIY</category>
        
        <category>Hardware</category>
        
        <category>Raspberry Pi</category>
        
        <category>Software</category>
        
      </item>
    
      <item>
        <title>How to get the TP-Link TL-WN725N working on Raspberry Pi</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  Recently I bought two TP-Link TL-WN725N adapters off Amazon. They&amp;#8217;re cheap and according to the RPi peripherals list [&lt;a href=&quot;http://elinux.org/RPi_USB_Wi-Fi_Adapters&quot;&gt;here&lt;/a&gt;], are supposed to work well under Linux. They do, however, require a special driver which is not included in the Linux kernel itself. This leaves you with two options:
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &amp;#8211; Use one of MrEngman&amp;#8217;s pre-compiled kernel modules which is available on the Raspberry Pi forums [&lt;a href=&quot;http://www.raspberrypi.org/forums/viewtopic.php?f=28&amp;amp;t=62371&quot;&gt;here&lt;/a&gt;] (kudos to MrEngman to his ongoing effort!).
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  or
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &amp;#8211; You compile your own kernel module.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  However, keep in mind the following &lt;strong&gt;very important caveat&lt;/strong&gt;: whatever your choice is, this process requires some basic knowledge of Linux! If you don&amp;#8217;t feel comfortable messing around with kernel modules and such, I would recommend that you proceed with caution and maybe even ask a more experienced friend to give you a hand. It&amp;#8217;s unlikely you will ruin your Raspberry Pi but you may very well ruin your installation. &lt;strong&gt;PROCEED WITH CAUTION.&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Now, be aware that if you just want your wifi up and running and don&amp;#8217;t want to be bothered, you really should take the easy way out here and check whether MrEngman has a pre-compiled module that&amp;#8217;s been compiled with the same revision of your kernel. If you cannot find one or if you&amp;#8217;re feeling especially brave, read on for the step by step on how to compile it yourself.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Also keep in mind that this tutorial applies to the Raspbian distribution. It may (or may not) work in Pidora (and others) but it&amp;#8217;s up to you to adjust accordingly.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;h1 style=&quot;text-align: justify;&quot;&gt;
  Compiling a kernel module
&lt;/h1&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Be wary, this assumes you&amp;#8217;re going to compile a kernel module to the latest version of the Raspberry Pi firmware (and thus, at the time of writing, for the latest version of the 3.10.y branch). If you&amp;#8217;re not running this version, consider updating [&lt;a href=&quot;https://github.com/Hexxeh/rpi-update&quot;&gt;updating the RPi to the latest firmware&lt;/a&gt;]!
&lt;/p&gt;

&lt;h2 style=&quot;text-align: justify;&quot;&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ul style=&quot;text-align: justify;&quot;&gt;
  &lt;li&gt;
    Linux kernel source for the Raspberry Pi (do &lt;strong&gt;NOT&lt;/strong&gt; use the original Linux kernel as it does not contain all the patches and drivers required for your RPi to work smoothly), available on GitHub [&lt;a href=&quot;https://github.com/raspberrypi/linux/tree/rpi-3.10.y&quot;&gt;here&lt;/a&gt;].
  &lt;/li&gt;
  &lt;li&gt;
    Driver for the RTL8188EU, available on GitHub [&lt;a href=&quot;https://github.com/lwfinger/rtl8188eu&quot;&gt;here&lt;/a&gt;].
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Many Linux distributions provide a package just with the precompiled kernel headers and that makes it easier than what you&amp;#8217;ll have to do on the Raspberry Pi. Still, it&amp;#8217;s not so difficult. All you have to do is:
&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;
  Cloning and compiling the Linux kernel
&lt;/h3&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  1. Start by cloning the Linux kernel for the RPi
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;cd /usr/src/
sudo git clone https://github.com/raspberrypi/linux.git rpi-3.10.y
cd /usr/src/rpi-3.10.y/&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;span style=&quot;line-height: 1.5em;&quot;&gt;This will have created a folder called /usr/src/rpi-3.10.y/ where all the Linux kernel source now resides in your Raspberry Pi.&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  2. For ease of use, create a symbolic link to the /lib/modules/ structure
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;sudo ln -s /usr/src/rpi-3.10.y /lib/modules/`uname -r`/build&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Be sure to write it in as is (or simply copy &amp;amp; paste it in!) as the backticks around uname -r will create the right name for the folder. At this point, your /lib/modules/ path will have a link to the directory where the source code resides. We do this so later when we compile the driver, our life becomes much easier (as the Makefile will automatically look in that directory).
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  3. Copy your kernel configuration file to the directory where the source is:
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;sudo sh -c &#39;zcat /proc/config.gz &amp;gt; .config&#39;&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  This simply pulls the config from your running kernel into the new kernel you&amp;#8217;re about to compile.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  4. Pull the latest Module.symvers into your kernel&amp;#8217;s directory. Note: this is one of the reasons why I would recommend updating first to the latest kernel, otherwise you&amp;#8217;ll have to figure out which Module.symvers you need.
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;curl -O https://raw.githubusercontent.com/raspberrypi/firmware/master/extra/Module.symvers&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  5. Compile the kernel to a stage that is ready to be linked against kernel modules. You don&amp;#8217;t want to compile the whole kernel since that&amp;#8217;s 1) not necessary for compiling kernel modules and 2) would take ages on a Raspberry Pi with its limited computing power.
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;sudo make oldconfig
sudo make modules_prepare&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  6. Clone the driver off GitHub, compile it and off you go!
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;cd /usr/src/
git clone https://github.com/lwfinger/rtl8188eu.git
cd /usr/src/rtl8188eu/
sudo make
sudo make install&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  At this stage, the driver&amp;#8217;s firmware as well as the compiled kernel module have been copied into place but there are a few more considerations to be had.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  1 &amp;#8211; Do &lt;strong&gt;NOT&lt;/strong&gt; plug the wifi dongle with the Raspberry Pi turned on! Many people (including me) have reported that doing so causes the Raspberry Pi to suddenly restart and this can lead to serious corruption of your SD card. Be on the safe side! Shut down your Raspberry Pi (sudo shutdown -h now), plug in the dongle, and turn it back on.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  2 &amp;#8211; At this point, when you run &amp;#8220;ifconfig&amp;#8221; you should already have a wlan0 network which is not connected to anything. In my experience, getting it to connect was the biggest challenge so if you have a WPA/WPA2 network and would like to learn how to connect to it via command line, read on.
&lt;/p&gt;

&lt;h1 style=&quot;text-align: justify;&quot;&gt;
  Connecting to a WPA/WPA2 network via command line
&lt;/h1&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  When you know what you&amp;#8217;re doing, this is an extremely simple process. First off, run the following command:
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;wpa_passphrase &amp;lt;ssid&amp;gt;&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Where you should replace &lt;ssid&gt; with the actual SSID of your network (hint: use &amp;#8220;&amp;#8221; if your network&amp;#8217;s name has spaces in it). It will then prompt you to type in the password for your network. This script generates then a few lines in the format of:
&amp;lt;/p&amp;gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;network={
    ssid=&quot;Foo&quot;
    #psk=&quot;FoobarFoobar&quot;
    psk=f21df897e40a0e7253b8d53e35930e814f312df43ca2b085daa5109f2c2c5e54
}&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  I recommend that you delete the line started by #psk (as it reveals your password in clear text) and the rest you should copy and paste into a file at /etc/wpa_supplicant.conf. If it exists, overwrite it, if it does not exist, then create it (with e.g. sudo nano /etc/wpa_supplicant.conf).
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  After you&amp;#8217;ve done that, you need to tell Linux how this network is going to get an IP address and how it&amp;#8217;s managed. You can do so by editing the /etc/network/interfaces file as such:
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;sudo nano /etc/network/interfaces&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Here you should lookout for a line that starts as &amp;#8220;iface wlan0&amp;#8221;. In my case, this line was setting wlan0 as manual which is &lt;strong&gt;NOT&lt;/strong&gt; what we want. Ultimately you want something that looks like this:
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;iface wlan0 inet dhcp
wpa-conf /etc/wpa_supplicant.conf&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  And &lt;strong&gt;watch out!&lt;/strong&gt; If there is a line starting with &amp;#8220;wpa-roam&amp;#8221;, you can safely delete it as it will conflict with your new WPA settings!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  After you&amp;#8217;ve modified the file you can then save it and we&amp;#8217;re ready for action. Next thing you need to do is take the WLAN interface down and back up as such:
&lt;/p&gt;

&lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;sudo ifdown wlan0
sudo ifup wlan0&lt;/pre&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  And that&amp;#8217;s it! If everything went well, your Raspberry Pi should now be connected to your network via wifi!
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  If there&amp;#8217;s something that&amp;#8217;s not clear enough or some steps that I missed, feel free to drop me an e-mail. My e-mail address is my first name [@] my last name [dot] nl. And you can find my first and last name in the url of this blog (hint, my first name is Tiago!).
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Finally I would like to thank MrEngman for his dedication and continuous engagement in the Raspberry Pi forums as well as lwfinger for maintaining this driver and making it possible for us to use it on Linux! I would also like to thank Martijn from Grendelman.net for this &lt;a href=&quot;http://www.grendelman.net/wp/compiling-kernel-modules-for-raspbian-raspberry-pi/&quot;&gt;blog post&lt;/a&gt; which helped me in getting all this to work. Thanks! In a future post I will come back and explain how to cross-compile a kernel module for the Raspberry Pi so you can get it done faster by using your (more powerful) desktop computer to do the compilation.
&lt;/p&gt;
&lt;/ssid&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Apr 2014 23:22:57 +0200</pubDate>
        <link>https://etiago.github.io/2014/04/how-to-get-the-tp-link-tl-wn725n-working-on-raspberry-pi/</link>
        <guid isPermaLink="true">https://etiago.github.io/2014/04/how-to-get-the-tp-link-tl-wn725n-working-on-raspberry-pi/</guid>
        
        <category>Dongle</category>
        
        <category>Hardware</category>
        
        <category>Raspberry Pi</category>
        
        <category>TL-WN725N</category>
        
        <category>TP-Link</category>
        
        <category>TP-Link WN725N</category>
        
        <category>Wifi</category>
        
        <category>Wifi dongle</category>
        
        <category>Wifi USB</category>
        
        <category>WN725N</category>
        
        
        <category>Hardware</category>
        
        <category>Raspberry Pi</category>
        
      </item>
    
      <item>
        <title>Chronopost Portugal? Serviço enganador&amp;#8230;</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  This post will, extraordinarily, be in Portuguese as it is a complaint and a warning towards a Portuguese courier company which is indulging in false advertising. This is, therefore, a warning for my fellow Portuguese countrymen.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &amp;#8212;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Esta é uma história de como os meus pais, na segunda-feira passada (dia 7 de Outubro de 2013) me enviaram pela &lt;a href=&quot;http://chronopost.pt/&quot;&gt;Chronopost Portugal&lt;/a&gt; uma encomenda para a Holanda, onde me encontro a residir. No site, a Chronopost anuncia o serviço &lt;a href=&quot;http://chronopost.pt/os-nossos-servicos/servicos-internacionais&quot;&gt;Chronopost Classic&lt;/a&gt; onde prometem entregas para a Europa dentro de 3~4 dias a preços convidativos (24 euros até 10 kg).
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Uma vez que a relação preço versus qualidade (anunciada) parecia bastante boa, decidi escolher o serviço da Chronopost.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Qual não é o meu espanto quando hoje, dia 11 de Outubro de 2013, passados 4 dias da expedição da encomenda, esta ainda não se encontra sequer na Holanda (de acordo com o track and trace). Depois de contactar por várias vezes a Chronopost e me terem sido dadas desculpas de que &lt;em&gt;&amp;#8220;os 4 dias são 4 dias de trânsito&amp;#8221;&lt;/em&gt; e de que &lt;em&gt;&amp;#8220;o dia de expedição não conta&amp;#8221;&lt;/em&gt;, o facto continua a ser de que excluindo o dia de expedição, faz hoje 4 dias desde que a encomenda se encontra em trânsito.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Após ter descoberto que não vai ser a Chronopost que me vai entregar a encomenda mas sim um dos seus parceiros (a &lt;a href=&quot;https://www.dpd.com/nl_en&quot;&gt;DPD&lt;/a&gt;), decidi contactar também esta empresa afim de tentar obter um esclarecimento sobre quando a encomenda será entregue. Estes senhores dizem-me que será entregue apenas na &lt;strong&gt;segunda-feira&lt;/strong&gt;, &lt;strong&gt;sete dias&lt;/strong&gt; depois da expedição.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  Fica aqui então o aviso &lt;strong&gt;&lt;/strong&gt;que a Chronopost Portugal está a &lt;strong&gt;enganar os seus clientes&lt;/strong&gt; com um serviço de pouca fiabilidade, prometendo entregas em 4 dias e fazendo-as em 7 dias. Conhece algum serviço mais fiável? Que tal deixá-lo então na secção de comentários em baixo?
&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Oct 2013 18:09:39 +0200</pubDate>
        <link>https://etiago.github.io/2013/10/chronopost-portugal-servico-enganador/</link>
        <guid isPermaLink="true">https://etiago.github.io/2013/10/chronopost-portugal-servico-enganador/</guid>
        
        <category>chronopost</category>
        
        <category>chronopost classic</category>
        
        <category>chronopost encomenda atrasada</category>
        
        <category>chronopost enganado</category>
        
        <category>chronopost enganador</category>
        
        <category>chronopost envio atrasado</category>
        
        <category>chronopost fiabilidade</category>
        
        <category>chronopost portugal</category>
        
        <category>chronopost prazo de entrega</category>
        
        <category>encomenda atrasada</category>
        
        
        <category>Be Warned</category>
        
      </item>
    
      <item>
        <title>Automatic Recovery of REST Interfaces</title>
        <description>&lt;p style=&quot;text-align: justify;&quot;&gt;
  Recovery of REST interfaces is an interesting research topic which came into conversation with one of our industrial partners and which I would like to explore. This is also something mentioned by Maleshkova et al in their work on &amp;#8220;&lt;em&gt;Investigating Web APIs on the World Wide Web&lt;/em&gt;&amp;#8221; (&lt;a href=&quot;http://sweet-dev.open.ac.uk/war/Papers/mmaWebAPISurvey.pdf&quot;&gt;pre-print&lt;/a&gt;, I&lt;a href=&quot;http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5693251&amp;amp;tag=1&quot;&gt;EEE citable&lt;/a&gt;). The authors claim that &lt;em&gt;&amp;#8220;two thirds of the APIs do not state the data-type of the input and 40% of the APIs do not state the HTTP method. If a standard interface description language, such as WSDL, [was] used [&amp;#8230;] this would be unthinkable&amp;#8221;&lt;/em&gt;.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  This is very true. Read on to know more.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  While SOAP services are always backed up by their WSDL files which describe the interfaces, including all the methods and data types, the much more popular REST services have no such feature. Instead, developers are left with manually created web pages which describe in natural language how to invoke the web API and what the endpoints are; case in point: &lt;a href=&quot;https://developers.facebook.com/docs/reference/api/publishing/&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://dev.twitter.com/docs/api/1.1&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;http://developer.netflix.com/docs/HTTP_Status_Codes&quot;&gt;Netflix&lt;/a&gt;. But what about when web API developers forget to change the documentation, or even worse, make a mistake when specifying the interface? This is when having automatic recovery of the REST interface would prove useful.
&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  The possibilities are endless. This recovery can be done on either client or server side (or both) and each of the sides can add a different view and understanding of the communication. Where with a SOAP-generated WSDL file we know that&lt;em&gt;&lt;/em&gt; whatever is in the WSDL file is what&amp;#8217;s available in the system, &lt;em&gt;no more, no less,&lt;/em&gt; by doing recovery of a REST interface we can learn many things:
&lt;/p&gt;

&lt;ol style=&quot;text-align: justify;&quot;&gt;
  &lt;li&gt;
    Client-side recovered interface: whatever is in the recovered interface &lt;em&gt;may or may not&lt;/em&gt; be all that&amp;#8217;s available on the server-side. At any rate, we know that whatever is in the recovered interface represents whatever &lt;strong&gt;features we are using&lt;/strong&gt; of that particular web API (because if we recovered it from runtime data, then our client has at some point used these features).
  &lt;/li&gt;
  &lt;li&gt;
    Server-side recovered interface: once again, because we&amp;#8217;re recovering the interface from usage data (and even though on the server-side you could probably do a full recovery based on static analysis), whatever we see in the recovered interface is in fact whatever is being used by &lt;strong&gt;ALL&lt;/strong&gt; our clients. This means that if you use long periods of runtime data to recover the interface, you can detect &lt;em&gt;potential dead code.&lt;/em&gt; This is very much the same principle behind code coverage, except we&amp;#8217;re testing interface coverage by client code.
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt;
  This is, of course, in a very premature stage and in my mind only but it is a thought I wanted to put out there and maybe stir the discussion around this topic a little. If you have any thoughts on this feel free to drop me a comment!
&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Oct 2013 16:46:53 +0200</pubDate>
        <link>https://etiago.github.io/2013/10/automatic-recovery-of-rest-interfaces/</link>
        <guid isPermaLink="true">https://etiago.github.io/2013/10/automatic-recovery-of-rest-interfaces/</guid>
        
        
        <category>SOA</category>
        
        <category>Software</category>
        
      </item>
    
  </channel>
</rss>
